package org.reso.certification.generators;

public class BDDTemplates {
  /**
   * Contains various templates used for test generation
   */
  public static String buildHeaderInfo(String headerContent, String timestamp) {
    if (headerContent == null || timestamp == null) return null;
    return
        "# This file was autogenerated on: " + timestamp +
        "\nFeature: " + headerContent + "\n\n" +
        "  Background:\n" +
        "    Given a RESOScript file was provided\n" +
        "    And Client Settings and Parameters were read from the file\n" +
        "    And a test container was successfully created from the given RESOScript\n" +
        "    And the test container uses an authorization_code or client_credentials for authentication" +
        "    And metadata were retrieved from the server\n";


  }

  public static String buildBooleanTest(String fieldName) {
    if (fieldName == null) return null;
    return
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    And \"" + fieldName + "\" is not a synonym for another field\n" +
          "    Then \"" + fieldName + "\" MUST be \"Boolean\" data type\n";
  }

  public static String buildDateTest(String fieldName, Integer suggestedMaxLength) {
    if (fieldName == null) return null;
    String template =
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    Then \"" + fieldName + "\" MUST be \"Date\" data type\n";

    if (suggestedMaxLength != null)
      template +=
          "    And \"" + fieldName + "\" length should be less than or equal to the RESO Suggested Max Length of " + suggestedMaxLength + "\n";

    return template;
  }

  public static String buildNumberTest(String fieldName, Integer suggestedMaxLength, Integer suggestedMaxScale) {
    if (fieldName == null) return null;

    if (suggestedMaxScale != null) return buildDecimalTest(fieldName, suggestedMaxLength, suggestedMaxScale);
    else return buildIntegerTest(fieldName);
  }

  public static String buildDecimalTest(String fieldName, Integer suggestedMaxLength, Integer suggestedMaxScale) {
    if (fieldName == null) return null;
    String template =
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    Then \"" + fieldName + "\" MUST be \"Decimal\" data type\n";

    if (suggestedMaxLength != null)
      template +=
          "    And \"" + fieldName + "\" precision should be less than or equal to the RESO Suggested Max Length of " + suggestedMaxLength + "\n";

    if (suggestedMaxScale != null)
      template +=
          "    And \"" + fieldName + "\" scale should be less than or equal to the RESO Suggested Max Scale of " + suggestedMaxScale + "\n";

    return template;
  }

  public static String buildIntegerTest(String fieldName) {
    if (fieldName == null) return null;
    return
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    Then \"" + fieldName + "\" MUST be \"Integer\" data type\n";
  }

  public static String buildStringListMultiTest(String fieldName, Integer suggestedMaxLength) {
    if (fieldName == null) return null;
    String template =
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    And \"" + fieldName + "\" enum values exist in the metadata\n" +
          "    And \"" + fieldName + "\" enum types MUST have at least one member\n" +
          "    Then \"" + fieldName + "\" MUST be \"String Array\" data type\n" +
          "    And RESO enumerations for \"" + fieldName + "\" MUST have annotations if they contain special characters\n";
    if (suggestedMaxLength != null)
      template +=
          "    And \"" + fieldName + "\" length should be less than or equal to the RESO Suggested Max Length of " + suggestedMaxLength + "\n";

    return template;
  }

  public static String buildStringListSingleTest(String fieldName, Integer suggestedMaxLength) {
    if (fieldName == null) return null;
    String template =
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    And \"" + fieldName + "\" enum values exist in the metadata\n" +
          "    And \"" + fieldName + "\" enum types MUST have at least one member\n" +
          "    Then \"" + fieldName + "\" MUST be \"String\" data type\n" +
          "    And \"" + fieldName + "\" should only contain enum values found in the metadata\n" +
          "    And \"" + fieldName + "\" enumerations must match  MUST have annotations if they contain special characters\n";

    if (suggestedMaxLength != null)
      template +=
          "    And \"" + fieldName + "\" length should be less than or equal to the RESO Suggested Max Length of " + suggestedMaxLength + "\n";

    return template;
  }

  public static String buildStringTest(String fieldName, Integer suggestedMaxLength) {
    if (fieldName == null) return null;
    String template =
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    Then \"" + fieldName + "\" MUST be \"String\" data type\n";

    if (suggestedMaxLength != null)
      template +=
          "    And \"" + fieldName + "\" length should be less than or equal to the RESO Suggested Max Length of " + suggestedMaxLength + "\n";

    return template;
  }
  
  public static String buildTimestampTest(String fieldName, Integer suggestedMaxLength) {
    if (fieldName == null) return null;
    String template =
        "\n  @" + fieldName +
        "\n  Scenario: " + fieldName + "\n" +
          "    Given \"" + fieldName + "\" exists in the metadata\n" +
          "    Then \"" + fieldName + "\" MUST be \"Timestamp\" data type\n";

    if (suggestedMaxLength != null)
      template +=
          "    And \"" + fieldName + "\" length should be less than or equal to the RESO Suggested Max Length of " + suggestedMaxLength + "\n";

    return template;
  }
}
