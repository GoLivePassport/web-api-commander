package org.reso.certification.codegen;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.ss.usermodel.Sheet;
import org.reso.commander.common.Utils;
import org.reso.models.DataDictionaryRow;
import org.xml.sax.InputSource;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import java.io.StringReader;

import static org.reso.certification.stepdefs.DataDictionary.REFERENCE_RESOURCE;
import static org.reso.commander.common.DataDictionaryMetadata.v1_7.*;

public class EDMXProcessor extends WorksheetProcessor {
  private static final Logger LOG = LogManager.getLogger(EDMXProcessor.class);
  final static String EMPTY_STRING = "";
  final static String RESO_NAMESPACE = "org.reso.metadata";

  String openEntityTypeTag = null, closeEntityTypeTag = null, keyMarkup = null;

  final static String openingDataServicesTag =
    "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" +
    "<!-- This file was autogenerated from " + REFERENCE_RESOURCE + " on: " + Utils.getTimestamp() + " -->\n" +
    "<edmx:Edmx xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\" Version=\"4.0\">\n" +
    "  <edmx:DataServices>\n";

  final static String closingDataServicesTag =
    "  </edmx:DataServices>\n" +
    "</edmx:Edmx>\n";

  @Override
  public void processResourceSheet(Sheet sheet) {
    this.sheet = sheet;
    openEntityTypeTag  = "      <EntityType Name=\"" + sheet.getSheetName() + "\">\n";
    closeEntityTypeTag = "      </EntityType>\n";
  }

  //TODO: add KeyNumeric handler
  private String getKeyMarkup(String resourceName) {
    if (resourceName == null) return null;

    String targetKeyName = null;
    switch(resourceName) {
      case PROPERTY: targetKeyName = "ListingKey"; break;
      case MEMBER: targetKeyName = "MemberKey"; break;
      case OFFICE: targetKeyName = "OfficeKey"; break;
      case CONTACTS: targetKeyName = "ContactsKey"; break;
      case CONTACT_LISTINGS: targetKeyName = "ContactListingsKey"; break;
      case HISTORY_TRANSACTIONAL: targetKeyName = "HistoryTransactionalKey"; break;
      case INTERNET_TRACKING: targetKeyName = "EventKey"; break;
      case MEDIA: targetKeyName = "MediaKey"; break;
      case OPEN_HOUSE: targetKeyName = "OpenHouseKey"; break;
      case OUID: targetKeyName = "OrganizationUniqueKey"; break;
      case PROSPECTING: targetKeyName = "ProspectingKey"; break;
      case QUEUE: targetKeyName = "QueueTransactionKey"; break;
      case RULES: targetKeyName = "RuleKey"; break;
      case SAVED_SEARCH: targetKeyName = "SavedSearchKey"; break;
      case SHOWING: targetKeyName = "ShowingKey"; break;
      case TEAMS: targetKeyName = "TeamKey"; break;
      case TEAM_MEMBERS: targetKeyName = "TeamMemberKey"; break;
      case CONTACT_LISTING_NOTES: targetKeyName = "ContactKey"; break;
      case OTHER_PHONE: targetKeyName = "OtherPhoneKey"; break;
      case PROPERTY_GREEN_VERIFICATION: targetKeyName = "GreenBuildingVerificationKey"; break;
      case PROPERTY_POWER_PRODUCTION: targetKeyName = "PowerProductionKey"; break;
      case PROPERTY_ROOMS: targetKeyName = "RoomKey"; break;
      case PROPERTY_UNIT_TYPES: targetKeyName = "UnitTypeKey"; break;
      case SOCIAL_MEDIA: targetKeyName = "SocialMediaKey"; break;
    }

    return targetKeyName != null ?
      "        <Key>\n" +
      "          <PropertyRef Name=\"" + targetKeyName + "\" />\n" +
      "        </Key>\n" : null;
  }

  @Override
  void finishProcessingResourceSheet(Sheet sheet) {
    resourceTemplates.put(sheet.getSheetName(),
        openEntityTypeTag + getKeyMarkup(sheet.getSheetName()) + markup.toString() + closeEntityTypeTag);
    reset();
  }

  @Override
  void processNumber(DataDictionaryRow row) {
    markup.append(EDMXTemplates.buildNumberMember(row));
  }

  @Override
  void processStringListSingle(DataDictionaryRow row) {
    markup.append(EDMXTemplates.buildEnumTypeSingleMember(row));
  }

  @Override
  void processString(DataDictionaryRow row) {
    markup.append(EDMXTemplates.buildStringMember(row));
  }

  @Override
  void processBoolean(DataDictionaryRow row) {
   markup.append(EDMXTemplates.buildBooleanMember(row));
  }

  @Override
  void processStringListMulti(DataDictionaryRow row) {
    markup.append(EDMXTemplates.buildEnumTypeMultiMember(row));
  }

  @Override
  void processDate(DataDictionaryRow row) {
    markup.append(EDMXTemplates.buildDateMember(row));
  }

  @Override
  void processTimestamp(DataDictionaryRow row) {
    markup.append(EDMXTemplates.buildDateTimeWithOffsetMember(row));
  }

  @Override
  void processCollection(DataDictionaryRow row) {
    LOG.debug("Collection Type is not supported at this time!");
  }

  @Override
  void generateOutput() {
    StringBuilder entityContainerTag = new StringBuilder();

    //add entity type definitions for each of the Data Dictionary resources to EDM
    entityContainerTag.append("      <EntityContainer Name=\"RESO\">\n");
    resourceTemplates.forEach((name, templateContent) ->
            entityContainerTag
                    .append("        <EntitySet Name=\"")
                    .append(name).append("\" EntityType=\"" + RESO_NAMESPACE)
                    .append(".")
                    .append(name).append("\" />\n"));
    entityContainerTag.append("      </EntityContainer>\n");


    StringBuilder content = new StringBuilder();

    content.append(openingDataServicesTag);
    content.append("    <Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"" + RESO_NAMESPACE + "\">\n");

    //iterate through each of the found resources and generate their edm:EntityType content content
    resourceTemplates.forEach((name, templateContent) -> content.append(templateContent));

    content.append("\n").append(entityContainerTag.toString());
    content.append("    </Schema>\n");

    //add opening tag for enums namespace
    content.append("\n    <Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"" + RESO_NAMESPACE + ".enums\">");

    //iterate through each of the lookup values and generate their edm:EnumType content
    //TODO: single vs. multi, single for now
    getLookups().forEach((lookupName, lookup) -> {
      content.append("\n      <EnumType Name=\"").append(lookupName).append("\">");
      lookup.forEach(member -> content.append("\n        <Member Name=\"").append(member).append("\" />"));
      content.append("\n      </EnumType>");
    });
    //closing tag for enums schema definition
    content.append("\n    </Schema>\n");

    content.append(closingDataServicesTag);

    final String output = content.toString();

    try {
      //check the document that was created - will throw exceptions if that document doesn't contain valid XML
      SAXParserFactory.newInstance().newSAXParser().parse(new InputSource(new StringReader(output)), new DefaultHandler());

      //write content of the string to
      Utils.createFile(getDirectoryName(), getReferenceResource().replace(".xlsx", ".edmx"), output);
    } catch (Exception ex) {
      LOG.error(ex);
    }
  }

  public static final class EDMXTemplates {

    public static String buildBooleanMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;
      return "        <Property Name=\""+ row.getStandardName() + "\" Type=\"Edm.Boolean\" />\n";
    }

    public static String buildDateMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;
      return "        <Property Name=\""+ row.getStandardName() + "\" Type=\"Edm.Date\" />\n";
    }

    public static String buildNumberMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;

      if (row.getSuggestedMaxPrecision() != null) return buildDecimalMember(row);
      else return buildIntegerMember(row);
    }

    public static String buildDecimalMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;
      String template = "        <Property Name=\"" + row.getStandardName() + "\" Type=\"Edm.Decimal\"";

      //DD uses length as precision in this case
      if (row.getSuggestedMaxLength() != null) template += " Precision=\"" + row.getSuggestedMaxLength() + "\"";

      //DD uses precision as scale in this case
      if (row.getSuggestedMaxPrecision() != null) template += " Scale=\"" + row.getSuggestedMaxPrecision() + "\"";

      template += " />\n";

      return template;
    }

    public static String buildIntegerMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;
      return  "        <Property Name=\"" + row.getStandardName() + "\" Type=\"Edm.Int64\" />\n";
    }

    public static String buildEnumTypeMultiMember(DataDictionaryRow row) {
      if (row == null || row.getLookup() == null) return EMPTY_STRING;
      if (!row.getLookup().toLowerCase().contains("lookups")) return EMPTY_STRING;
      String lookupName = row.getLookup().replace("Lookups", "").trim();
      return "        <Property Name=\"" + row.getStandardName() + "\" Type=\"" + RESO_NAMESPACE + ".enums." + lookupName + "\" />\n";
    }

    public static String buildEnumTypeSingleMember(DataDictionaryRow row) {
      if (row == null || row.getLookup() == null) return EMPTY_STRING;
      if (!row.getLookup().toLowerCase().contains("lookups")) return EMPTY_STRING;
      String lookupName = row.getLookup().replace("Lookups", "").trim();
      return "        <Property Name=\"" + row.getStandardName() + "\" Type=\"" + RESO_NAMESPACE + ".enums." + lookupName + "\" />\n";
    }

    public static String buildStringMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;
      String template = "        <Property Name=\"" + row.getStandardName() + "\" Type=\"Edm.String\"";

      if (row.getSuggestedMaxLength() != null) template += " MaxLength=\"" + row.getSuggestedMaxLength() + "\"";
      template += " />\n";

      return template;
    }

    public static String buildDateTimeWithOffsetMember(DataDictionaryRow row) {
      if (row == null) return EMPTY_STRING;
      String template = "        <Property Name=\"" + row.getStandardName() + "\" Type=\"Edm.DateTimeOffset\"";

      if (row.getSuggestedMaxLength() != null) template += " Precision=\"" + row.getSuggestedMaxLength() + "\"";
      template += " />\n";

      return template;
    }
  }
}
