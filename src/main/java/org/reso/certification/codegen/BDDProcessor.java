package org.reso.certification.codegen;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.ss.usermodel.Sheet;
import org.reso.commander.common.Utils;
import org.reso.models.StandardField;

import java.util.Arrays;
import java.util.Date;
import java.util.stream.Collectors;

import static org.reso.certification.containers.WebAPITestContainer.SINGLE_SPACE;

public class BDDProcessor extends WorksheetProcessor {
  private static final Logger LOG = LogManager.getLogger(BDDProcessor.class);
  private static final String
      FEATURE_EXTENSION = ".feature",
      LOCKED_WITH_ENUMERATIONS_KEY = "Locked with Enumerations";

  @Override
  public void processResourceSheet(Sheet sheet) {
    this.sheet = sheet;
    markup.append(BDDTemplates.buildHeaderInfo(sheet.getSheetName(), startTimestamp));
  }

  @Override
  void processNumber(StandardField row) {
    markup.append(BDDTemplates.buildNumberTest(row, sheet.getSheetName()));
  }

  @Override
  void processStringListSingle(StandardField row) {
    markup.append(BDDTemplates.buildStringListSingleTest(row, sheet.getSheetName()));
  }

  @Override
  void processString(StandardField row) {
    markup.append(BDDTemplates.buildStringTest(row, sheet.getSheetName()));
  }

  @Override
  void processBoolean(StandardField row) {
    markup.append(BDDTemplates.buildBooleanTest(row, sheet.getSheetName()));
  }

  @Override
  void processStringListMulti(StandardField row) {
    markup.append(BDDTemplates.buildStringListMultiTest(row, sheet.getSheetName()));
  }

  @Override
  void processDate(StandardField row) {
    markup.append(BDDTemplates.buildDateTest(row, sheet.getSheetName()));
  }

  @Override
  void processTimestamp(StandardField row) {
    markup.append(BDDTemplates.buildTimestampTest(row, sheet.getSheetName()));
  }

  @Override
  void processCollection(StandardField row) {
    LOG.debug("Collection Type is not supported!");
  }

  @Override
  void generateOutput() {
    LOG.info("Generating BDD .feature files for the following resources: " + resourceTemplates.keySet().toString());
    resourceTemplates.forEach((resourceName, content) -> {
      //put in local directory rather than relative to where the input file is
      Utils.createFile(getDirectoryName(), resourceName.toLowerCase() + FEATURE_EXTENSION, content);
    });
  }

  public static final class BDDTemplates {
    /**
     * Contains various templates used for test generation
     */
    public static String buildHeaderInfo(String resourceName, String generatedTimestamp) {
      if (resourceName == null) return null;
      if (generatedTimestamp == null) generatedTimestamp = Utils.getTimestamp(new Date());
      return
          "# This file was autogenerated on: " + generatedTimestamp + "\n" +
              "Feature: " + resourceName + "\n\n" +
              "  Background:\n" +
              "    Given a RESOScript file was provided\n" +
              "    And Client Settings and Parameters were read from the file\n" +
              "    And a test container was successfully created from the given RESOScript\n" +
              "    And the test container uses an Authorization Code or Client Credentials for authentication\n" +
              "    And valid metadata were retrieved from the server\n";
    }

    public static String buildBooleanTest(StandardField row, String... tags) {
      if (row == null) return null;
      return
          "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"Boolean\" data type\n";
    }

    public static String buildDateTest(StandardField row, String... tags) {
      if (row == null) return null;
      return
          "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"Date\" data type\n";
    }

    public static String buildNumberTest(StandardField row, String... tags) {
      if (row == null) return null;

      if (row.getSuggestedMaxPrecision() != null) return buildDecimalTest(row, tags);
      else return buildIntegerTest(row, tags);
    }

    public static String buildDecimalTest(StandardField row, String... tags) {
      if (row == null) return null;
      String template =
          "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"Decimal\" data type\n";

      if (row.getSuggestedMaxLength() != null)
        template +=
            "    And \"" + row.getStandardName() + "\" precision SHOULD be less than or equal to the RESO Suggested Max Length of " + row.getSuggestedMaxLength() + "\n";

      if (row.getSuggestedMaxPrecision() != null)
        template +=
            "    And \"" + row.getStandardName() + "\" scale SHOULD be less than or equal to the RESO Suggested Max Scale of " + row.getSuggestedMaxPrecision() + "\n";

      return template;
    }

    public static String buildIntegerTest(StandardField row, String... tags) {
      if (row == null) return null;
      return
          "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"Integer\" data type\n";
    }

    public static String buildStringListMultiTest(StandardField row, String... tags) {
      if (row == null) return null;

      String template = "\n  @" + row.getStandardName() + SINGLE_SPACE +
          Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
          "  Scenario: " + row.getStandardName() + "\n" +
          "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
          "    Then \"" + row.getStandardName() + "\" MUST be \"Multiple Enumeration\" data type\n";

      if (row.getLookupStatus().contentEquals(LOCKED_WITH_ENUMERATIONS_KEY)) {
        template +=
            "    And \"" + row.getStandardName() + "\" MUST contain at least one standard enumeration\n";
      }
      return template;
    }

    public static String buildStringListSingleTest(StandardField row, String... tags) {
      if (row == null) return null;
      String template = "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"Single Enumeration\" data type\n";

      if (row.getLookupStatus().contentEquals(LOCKED_WITH_ENUMERATIONS_KEY)) {
        template +=
            "    And \"" + row.getStandardName() + "\" MUST contain at least one standard enumeration\n";
      }

      return template;
    }

    public static String buildStringTest(StandardField row, String... tags) {
      if (row == null) return null;
      String template =
          "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"String\" data type\n";

      if (row.getSuggestedMaxLength() != null)
        template +=
            "    And \"" + row.getStandardName() + "\" length SHOULD be less than or equal to the RESO Suggested Max Length of " + row.getSuggestedMaxLength() + "\n";

      return template;
    }

    public static String buildTimestampTest(StandardField row, String... tags) {
      if (row == null) return null;
      return
          "\n  @" + row.getStandardName() + SINGLE_SPACE +
              Arrays.stream(tags).map(tag -> "@" + tag).collect(Collectors.joining(SINGLE_SPACE)) + "\n" +
              "  Scenario: " + row.getStandardName() + "\n" +
              "    When \"" + row.getStandardName() + "\" exists in the \"" + row.getParentResourceName() + "\" metadata\n" +
              "    Then \"" + row.getStandardName() + "\" MUST be \"Timestamp\" data type\n";
    }
  }
}
